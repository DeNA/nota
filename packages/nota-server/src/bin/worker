#!/usr/bin/env node

const { QueueScheduler, Worker } = require("bullmq");
const { getRedisClient } = require("../lib/redisClient");
const { logger } = require("../lib/logger");
const version = require("../lib/version");
const taskInitializeService = require("../services/taskInitializeService");
const taskExportService = require("../services/taskExportService");
const taskMaintenanceService = require("../services/taskMaintenanceService");
const mediaSourceFetchService = require("../services/mediaSourceFetchService");
const jobSchedulerService = require("../services/jobSchedulerService");
const notaScheduler = require("../services/notaScheduler");
const CONCURRENCY = 1;

logger.info({
  message: `Starting nota worker version: ${version()}`
});

// MEDIA_SOURCE_FETCH
const mediaSourceFetchWorker = new Worker(
  mediaSourceFetchService.name,
  mediaSourceFetchService._processor,
  {
    concurrency: CONCURRENCY,
    connection: getRedisClient()
  }
);

// TASK_FETCH
const taskInitializeWorker = new Worker(
  taskInitializeService.name,
  taskInitializeService._processor,
  {
    concurrency: CONCURRENCY,
    connection: getRedisClient()
  }
);

// TASK_EXPORT
const taskExportWorker = new Worker(
  taskExportService.name,
  taskExportService._processor,
  {
    concurrency: CONCURRENCY,
    connection: getRedisClient()
  }
);

// TASK_MAINTENANCE
const taskMaintenanceWorker = new Worker(
  taskMaintenanceService.name,
  taskMaintenanceService._processor,
  {
    concurrency: CONCURRENCY,
    connection: getRedisClient()
  }
);

// JOB SCHEDULER
const jobSchedulerWorker = new Worker(
  jobSchedulerService.name,
  jobSchedulerService._processor,
  {
    concurrency: CONCURRENCY,
    connection: getRedisClient()
  }
);

// GLOBAL COMMON SCHEDULER
const notaSchedulerWorker = new Worker(
  notaScheduler.name,
  notaScheduler._processor,
  {
    concurrency: CONCURRENCY,
    connection: getRedisClient()
  }
);
const notaQueueScheduler = new QueueScheduler(notaScheduler.name, {
  connection: getRedisClient()
});
notaScheduler.start();

const workers = [
  mediaSourceFetchWorker,
  taskInitializeWorker,
  taskExportWorker,
  taskMaintenanceWorker,
  jobSchedulerWorker,
  notaSchedulerWorker
];

// Stop services gracefully
process.on("SIGINT", async () => {
  logger.info("Received SIGINT. Starting cleanup");
  logger.info("Shutting down services");

  await notaScheduler.stop();
  await notaQueueScheduler.close();
  await Promise.all([workers.map((worker) => worker.pause())]);
  process.exit(0);
});
